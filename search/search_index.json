{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Awesome Tutos \u00b6 A curated list of tech tutos to share and to refer back to. More often than not, I find myself in the need of refering back to a good tutorial I read about a certain piece of tech. Sometimes it's for myself, sometimes it's to share to an intern or to go along a comment in a code review. But every time I look for the link. Hopefully that list will solve that. Contents \u00b6 The reader can refer back to guides as she sees fit. They might still be work in progress. They provide a structure for knowledge sharing around a couple areas: Python software engineering Work that happen in a Data Team Machine Learning Engineering and Data Science Tech Infra Team Docs Data Stack Roles Python AWS Code Review Git Applied ML Research SQL Project Management dbt Backend docker CI Some nice reads don't fit into guides at this time, so I include them in \"Others\". Start Here \u00b6 Alongside reading those guides, I advise following those courses in order: [ ] First Day on GitHub | GitHub Learning Lab [ ] First Week on GitHub | GitHub Learning Lab [ ] DevOps with GitHub Actions | GitHub Learning Lab License \u00b6 To the extent possible under law, Louis Guitton has waived all copyright and related or neighboring rights to this work.","title":"Home"},{"location":"#awesome-tutos","text":"A curated list of tech tutos to share and to refer back to. More often than not, I find myself in the need of refering back to a good tutorial I read about a certain piece of tech. Sometimes it's for myself, sometimes it's to share to an intern or to go along a comment in a code review. But every time I look for the link. Hopefully that list will solve that.","title":"Awesome Tutos"},{"location":"#contents","text":"The reader can refer back to guides as she sees fit. They might still be work in progress. They provide a structure for knowledge sharing around a couple areas: Python software engineering Work that happen in a Data Team Machine Learning Engineering and Data Science Tech Infra Team Docs Data Stack Roles Python AWS Code Review Git Applied ML Research SQL Project Management dbt Backend docker CI Some nice reads don't fit into guides at this time, so I include them in \"Others\".","title":"Contents"},{"location":"#start-here","text":"Alongside reading those guides, I advise following those courses in order: [ ] First Day on GitHub | GitHub Learning Lab [ ] First Week on GitHub | GitHub Learning Lab [ ] DevOps with GitHub Actions | GitHub Learning Lab","title":"Start Here"},{"location":"#license","text":"To the extent possible under law, Louis Guitton has waived all copyright and related or neighboring rights to this work.","title":"License"},{"location":"guides/others/","text":"Other good reads \u00b6 Tech \u00b6 General Software \u00b6 Naming things in Software matters Data architecture vs backend architecture \u00b7 Erik Bernhardsson Building backends Python \u00b6 About software engineering in python. Things you're probably not using in Python3 WTF Python Flask \u00b6 The Flask Mega-Tutorial Cookiecutter Flask Data Science \u00b6 Reproducible DS Project Structure Open Machine Learning Course mlcourse.ai Spark \u00b6 Practical Apache Spark in 10 minutes Sata Engineering \u00b6 Triptych by the creator of Airflow What is a Data Engineer, 2017 What are the limitations of Data Engineering, 2017 How can we solve some of these limitations, 2018 Infra \u00b6 Regex \u00b6 Interactive tutorial Team \u00b6 Collaboration \u00b6 Pair Programming in Jina - Onboarding via Pairing | Jina AI Requests for Comments at Uber Mentoring, you won't believe what happened next Manager Relationship \u00b6 Reflecting on personal development with Brag Documents What we do wrong about meetings and how to change this Choosing the Management Track Things your manager might not know HR \u00b6 Exit Interviews Are a Trap - Jacob Kaplan-Moss Others \u00b6 Adapting the pomodoro technique to engineering The Part Time Creator Manifesto","title":"Others"},{"location":"guides/others/#other-good-reads","text":"","title":"Other good reads"},{"location":"guides/others/#tech","text":"","title":"Tech"},{"location":"guides/others/#infra","text":"","title":"Infra"},{"location":"guides/others/#team","text":"","title":"Team"},{"location":"guides/others/#hr","text":"Exit Interviews Are a Trap - Jacob Kaplan-Moss","title":"HR"},{"location":"guides/infra/aws/","text":"AWS Guide \u00b6 AWS CLI configuration \u00b6 When using Amazon S3 to store data, a simple method of managing AWS access is to set your access keys to environment variables. However, managing mutiple sets of keys on a single machine (e.g. when working on multiple projects) it is best to use a credentials file , typically located in ~/.aws/credentials . A typical file might look like: [default] aws_access_key_id = myaccesskey aws_secret_access_key = mysecretkey [another_project] aws_access_key_id = myprojectaccesskey aws_secret_access_key = myprojectsecretkey You can add the profile name when initialising a project; assuming no applicable environment variables are set, the profile credentials will be used be default.","title":"AWS"},{"location":"guides/infra/aws/#aws-guide","text":"","title":"AWS Guide"},{"location":"guides/infra/aws/#aws-cli-configuration","text":"When using Amazon S3 to store data, a simple method of managing AWS access is to set your access keys to environment variables. However, managing mutiple sets of keys on a single machine (e.g. when working on multiple projects) it is best to use a credentials file , typically located in ~/.aws/credentials . A typical file might look like: [default] aws_access_key_id = myaccesskey aws_secret_access_key = mysecretkey [another_project] aws_access_key_id = myprojectaccesskey aws_secret_access_key = myprojectsecretkey You can add the profile name when initialising a project; assuming no applicable environment variables are set, the profile credentials will be used be default.","title":"AWS CLI configuration"},{"location":"guides/infra/data-stack/","text":"Data Stack Guide \u00b6 Data Stack Canva \u00b6 Data Stack Example \u00b6","title":"Data Stack"},{"location":"guides/infra/data-stack/#data-stack-guide","text":"","title":"Data Stack Guide"},{"location":"guides/infra/data-stack/#data-stack-canva","text":"","title":"Data Stack Canva"},{"location":"guides/infra/data-stack/#data-stack-example","text":"","title":"Data Stack Example"},{"location":"guides/team/applied-ml-research/","text":"Applied ML Research Guide \u00b6 Checklist \u00b6 Journaling \u00b6 Journaling for better knowledge sharing How X-Team Uses Slack Journals to Stay Productive 20% time project \u00b6 Reading papers \u00b6","title":"Applied ML Research"},{"location":"guides/team/applied-ml-research/#applied-ml-research-guide","text":"","title":"Applied ML Research Guide"},{"location":"guides/team/applied-ml-research/#checklist","text":"","title":"Checklist"},{"location":"guides/team/applied-ml-research/#journaling","text":"Journaling for better knowledge sharing How X-Team Uses Slack Journals to Stay Productive","title":"Journaling"},{"location":"guides/team/applied-ml-research/#20-time-project","text":"","title":"20% time project"},{"location":"guides/team/applied-ml-research/#reading-papers","text":"","title":"Reading papers"},{"location":"guides/team/code-review/","text":"Code Review Guide \u00b6 Github Course \u00b6 Reviewing pull requests | GitHub Learning Lab Pros and Cons \u00b6 (apparent) Cons Pros adds time demand bug rate decreases by 80% adds process productivity increases by 15% can bring up team tensions share ownership \"smart\" devs think they don't need it sharing knowledge in the team for when someone gets sick Fundamentals \u00b6 Universal code reviews: Everyone should review and be reviewed (junior or senior) Ensure consistency: We should agree on a style guide to move away from personal preference (we use Google's style guide for R and python) Once we agree on the style guide, start automating things with linters (from more painful to less: CI on the code, git pre-commit hooks or IDE setups for each developer) performed by peers and not management (core review is not performance review) no blame culture How to code review \u00b6 As in Maslow's pyramid, each layer requires the previous one. It is useless for code that is charging the wrong customer to be readable. Be a great submitter (when writing a PR) \u00b6 Provide context with the PR template YOU are the primary reviewer code review is not a tennis game where \"the ball is in your court now\". Review your code with the same level of detail that you would giving reviews. make sure the code works don't rely on others to catch your mistakes Things to think about did I check for reusable code or utility methods? is the code elegant ? did I remove debugger statements and prints? is the code readable ? is my code secure ? is my code maintainable ? Work in progress We believe in starting a review early so you don\u2019t get too far only to have to rewrite things after someone has made a great suggestion. Just create a PR even with a readme commit (when 30 to 50% of the code is there, it's a good rule of thumb), and add a clear \"[ WIP ]\" tag to the title so that we know it's a work in progress. The sooner you get feedback, the better: nobody wants to hear at 90% of the way \"you need to redo everything\". Ask for review early and expect architectural design comments. General Guidelines Provide context to the reader = use the PR template Review your own code = if needed, build a sandbox Expect conversation Submit in progress work = see next slide Submit reviews \\< 500 lines of python code Use automated tools = see next slides Be responsive Accept defeat How to allow maintainers to modify your PR Allowing changes to a pull request branch created from a fork - GitHub Docs Be a great reviewer (When reading a PR) \u00b6 Make sure you are aware of the problem/feature. Don't be rude, be polite Try to avoid the usage of the first person, try to talk about the PR, the Code, not about the author! Give suggestions and make clear why do you think you suggestion is better than the current approach. Link to resources, blog posts, stack overflow answers Don't point out just the bad things, give compliment as well. Ask questions instead of giving answers Don't burn out: try to review max 400 lines of code in one session. Make it part of your daily workflow. (use github notifications) Don't use the words \"now simply\", \"easily\", \"just\", \"obviously\" ... \"Now, simply stretch and smile\" What to provide feedback on Code review is not only for experienced developers! Here is what you can provide feedback on: high level business goals high level glance at the code and readability check setup: can you run it ? technical solutions / architecture design / the actual code How to git checkout a PR If you need guidance on juggling PRs with the forking workflow, please check out documentation We can directly fetch a PR code to test something locally. git fetch upstream pull/53/head:53 git checkout 53 How to push changes to a PR git push origin HEAD:refs/pull/ { pull number from previous section } /head References \u00b6 Code Review Skills for Pythonistas - Talk and Slides Mawslow's pyramid of code review Code Reviews: Just Do It Reviewer Guidance - Code With Engineering Playbook - Microsoft","title":"Code Review"},{"location":"guides/team/code-review/#code-review-guide","text":"","title":"Code Review Guide"},{"location":"guides/team/code-review/#github-course","text":"Reviewing pull requests | GitHub Learning Lab","title":"Github Course"},{"location":"guides/team/code-review/#pros-and-cons","text":"(apparent) Cons Pros adds time demand bug rate decreases by 80% adds process productivity increases by 15% can bring up team tensions share ownership \"smart\" devs think they don't need it sharing knowledge in the team for when someone gets sick","title":"Pros and Cons"},{"location":"guides/team/code-review/#fundamentals","text":"Universal code reviews: Everyone should review and be reviewed (junior or senior) Ensure consistency: We should agree on a style guide to move away from personal preference (we use Google's style guide for R and python) Once we agree on the style guide, start automating things with linters (from more painful to less: CI on the code, git pre-commit hooks or IDE setups for each developer) performed by peers and not management (core review is not performance review) no blame culture","title":"Fundamentals"},{"location":"guides/team/code-review/#how-to-code-review","text":"As in Maslow's pyramid, each layer requires the previous one. It is useless for code that is charging the wrong customer to be readable.","title":"How to code review"},{"location":"guides/team/code-review/#be-a-great-submitter-when-writing-a-pr","text":"Provide context with the PR template YOU are the primary reviewer code review is not a tennis game where \"the ball is in your court now\". Review your code with the same level of detail that you would giving reviews. make sure the code works don't rely on others to catch your mistakes Things to think about did I check for reusable code or utility methods? is the code elegant ? did I remove debugger statements and prints? is the code readable ? is my code secure ? is my code maintainable ? Work in progress We believe in starting a review early so you don\u2019t get too far only to have to rewrite things after someone has made a great suggestion. Just create a PR even with a readme commit (when 30 to 50% of the code is there, it's a good rule of thumb), and add a clear \"[ WIP ]\" tag to the title so that we know it's a work in progress. The sooner you get feedback, the better: nobody wants to hear at 90% of the way \"you need to redo everything\". Ask for review early and expect architectural design comments. General Guidelines Provide context to the reader = use the PR template Review your own code = if needed, build a sandbox Expect conversation Submit in progress work = see next slide Submit reviews \\< 500 lines of python code Use automated tools = see next slides Be responsive Accept defeat How to allow maintainers to modify your PR Allowing changes to a pull request branch created from a fork - GitHub Docs","title":"Be a great submitter (when writing a PR)"},{"location":"guides/team/code-review/#be-a-great-reviewer-when-reading-a-pr","text":"Make sure you are aware of the problem/feature. Don't be rude, be polite Try to avoid the usage of the first person, try to talk about the PR, the Code, not about the author! Give suggestions and make clear why do you think you suggestion is better than the current approach. Link to resources, blog posts, stack overflow answers Don't point out just the bad things, give compliment as well. Ask questions instead of giving answers Don't burn out: try to review max 400 lines of code in one session. Make it part of your daily workflow. (use github notifications) Don't use the words \"now simply\", \"easily\", \"just\", \"obviously\" ... \"Now, simply stretch and smile\" What to provide feedback on Code review is not only for experienced developers! Here is what you can provide feedback on: high level business goals high level glance at the code and readability check setup: can you run it ? technical solutions / architecture design / the actual code How to git checkout a PR If you need guidance on juggling PRs with the forking workflow, please check out documentation We can directly fetch a PR code to test something locally. git fetch upstream pull/53/head:53 git checkout 53 How to push changes to a PR git push origin HEAD:refs/pull/ { pull number from previous section } /head","title":"Be a great reviewer (When reading a PR)"},{"location":"guides/team/code-review/#references","text":"Code Review Skills for Pythonistas - Talk and Slides Mawslow's pyramid of code review Code Reviews: Just Do It Reviewer Guidance - Code With Engineering Playbook - Microsoft","title":"References"},{"location":"guides/team/data-team-roles/","text":"Roles of a Data Team \u00b6 You Only Need These 3 Data Roles in a Data-Driven Enterprise - Laszlo\u2019s Newsletter Short story \u00b6 https://erikbern.com/2021/07/07/the-data-team-a-short-story.html","title":"Roles"},{"location":"guides/team/data-team-roles/#roles-of-a-data-team","text":"You Only Need These 3 Data Roles in a Data-Driven Enterprise - Laszlo\u2019s Newsletter","title":"Roles of a Data Team"},{"location":"guides/team/data-team-roles/#short-story","text":"https://erikbern.com/2021/07/07/the-data-team-a-short-story.html","title":"Short story"},{"location":"guides/team/diagrams/","text":"UML + ERD p25 (mermaid js, mingrammer diagrams, dbdiagram.io) https://plantuml.com/sequence-diagram https://plantuml.com/activity-diagram-legacy","title":"Diagrams"},{"location":"guides/team/eng-management/","text":"Performance management \u00b6 Performance reviews don\u2019t actually assess your performance.","title":"Eng management"},{"location":"guides/team/eng-management/#performance-management","text":"Performance reviews don\u2019t actually assess your performance.","title":"Performance management"},{"location":"guides/team/hiring/","text":"Hiring Guide \u00b6 Assignments - Ad Hoc Homework - coding challenges for many positions Frontend engineer Fullstack engineer Backend engineer SRE engineer Data Engineer Data Analyst A Framework for Good Work Sample Tests: Eight Rules for Fair Tests Unpacking Interview Questions - Jacob Kaplan-Moss","title":"Hiring Guide"},{"location":"guides/team/hiring/#hiring-guide","text":"Assignments - Ad Hoc Homework - coding challenges for many positions Frontend engineer Fullstack engineer Backend engineer SRE engineer Data Engineer Data Analyst A Framework for Good Work Sample Tests: Eight Rules for Fair Tests Unpacking Interview Questions - Jacob Kaplan-Moss","title":"Hiring Guide"},{"location":"guides/team/onboarding/","text":"Setup machine etc... \u00b6 https://sourabhbajaj.com/mac-setup/ mac setup: cd / && open . # open root in finder, add it to favourites # open Finder preferences > Advanced settings > tick all boxes Create personal website with Github pages and \u00b6 https://jamstack.org/generators/ SSG: jekyll that comes by default with github mkdocs because it's the best python based SSG others: Hugo, Next.js and Gatsby Domain name: namecheap or name.com or tech.domains google domains General Onboarding guide \u00b6 https://codesubmit.io/blog/guide-to-onboarding-developers/","title":"Onboarding"},{"location":"guides/team/onboarding/#setup-machine-etc","text":"https://sourabhbajaj.com/mac-setup/ mac setup: cd / && open . # open root in finder, add it to favourites # open Finder preferences > Advanced settings > tick all boxes","title":"Setup machine etc..."},{"location":"guides/team/onboarding/#create-personal-website-with-github-pages-and","text":"https://jamstack.org/generators/ SSG: jekyll that comes by default with github mkdocs because it's the best python based SSG others: Hugo, Next.js and Gatsby Domain name: namecheap or name.com or tech.domains google domains","title":"Create personal website with Github pages and"},{"location":"guides/team/onboarding/#general-onboarding-guide","text":"https://codesubmit.io/blog/guide-to-onboarding-developers/","title":"General Onboarding guide"},{"location":"guides/team/project-management/","text":"Project Management Guide \u00b6 How To Do Less","title":"Project Management"},{"location":"guides/team/project-management/#project-management-guide","text":"How To Do Less","title":"Project Management Guide"},{"location":"guides/tech/backend/","text":"Backend Guide \u00b6 The Twelve-Factor App Methodology Keep secrets and configuration out of version control \u00b6 You really don't want to leak your AWS secret key or Postgres username and password on Github. Enough said \u2014 see the Twelve Factor App principles on this point. Here's one way to do this: Store your secrets and config variables in a special file \u00b6 Create a .env file in the project root folder. Thanks to the .gitignore , this file should never get committed into the version control repository. Here's an example: # example .env file DATABASE_URL=postgres://username:password@localhost:5432/dbname AWS_ACCESS_KEY=myaccesskey AWS_SECRET_ACCESS_KEY=mysecretkey OTHER_VARIABLE=something Use a package to load these variables automatically \u00b6 If you look at the stub script in src/data/make_dataset.py , it uses a package called python-dotenv to load up all the entries in this file as environment variables so they are accessible with os.environ.get . Here's an example snippet adapted from the python-dotenv documentation: # src/data/dotenv_example.py import os from dotenv import load_dotenv , find_dotenv # find .env automagically by walking up directories until it's found dotenv_path = find_dotenv () # load up the entries as environment variables load_dotenv ( dotenv_path ) database_url = os . environ . get ( \"DATABASE_URL\" ) other_variable = os . environ . get ( \"OTHER_VARIABLE\" ) Web development \u00b6 What is gunicorn (WSGI)? What is ASGI? Data management \u00b6 Data Management With Python, SQLite, and SQLAlchemy \u2013 Real Python Monitoring \u00b6 How to monitor your FastAPI service \u00b7 guitton.co","title":"Backend"},{"location":"guides/tech/backend/#backend-guide","text":"The Twelve-Factor App Methodology","title":"Backend Guide"},{"location":"guides/tech/backend/#keep-secrets-and-configuration-out-of-version-control","text":"You really don't want to leak your AWS secret key or Postgres username and password on Github. Enough said \u2014 see the Twelve Factor App principles on this point. Here's one way to do this:","title":"Keep secrets and configuration out of version control"},{"location":"guides/tech/backend/#web-development","text":"What is gunicorn (WSGI)? What is ASGI?","title":"Web development"},{"location":"guides/tech/backend/#data-management","text":"Data Management With Python, SQLite, and SQLAlchemy \u2013 Real Python","title":"Data management"},{"location":"guides/tech/backend/#monitoring","text":"How to monitor your FastAPI service \u00b7 guitton.co","title":"Monitoring"},{"location":"guides/tech/ci/","text":"Continuous Integration Guide \u00b6 GitHub Actions: Hello World | GitHub Learning Lab DevOps with GitHub Actions | GitHub Learning Lab","title":"CI"},{"location":"guides/tech/ci/#continuous-integration-guide","text":"GitHub Actions: Hello World | GitHub Learning Lab DevOps with GitHub Actions | GitHub Learning Lab","title":"Continuous Integration Guide"},{"location":"guides/tech/dbt/","text":"dbt Guide \u00b6 dbt training - Google Slides - Louis Guitton References \u00b6 dbt Guide | GitLab","title":"dbt"},{"location":"guides/tech/dbt/#dbt-guide","text":"dbt training - Google Slides - Louis Guitton","title":"dbt Guide"},{"location":"guides/tech/dbt/#references","text":"dbt Guide | GitLab","title":"References"},{"location":"guides/tech/docker/","text":"Docker Guide \u00b6 Docker \u00b6 Demystifying docker Docker Compose \u00b6 Best Practices Around Production Ready Web Apps with Docker Compose \u2014 Nick Janetakis \\ Kubernetes \u00b6 Kubernetes Deployment Cheat Sheet \u00b7 guitton.co Understanding Kubernetes in a visual way Kubernetes Learning Path - Tech Blost","title":"docker"},{"location":"guides/tech/docker/#docker-guide","text":"","title":"Docker Guide"},{"location":"guides/tech/docker/#docker","text":"Demystifying docker","title":"Docker"},{"location":"guides/tech/docker/#docker-compose","text":"Best Practices Around Production Ready Web Apps with Docker Compose \u2014 Nick Janetakis \\","title":"Docker Compose"},{"location":"guides/tech/docker/#kubernetes","text":"Kubernetes Deployment Cheat Sheet \u00b7 guitton.co Understanding Kubernetes in a visual way Kubernetes Learning Path - Tech Blost","title":"Kubernetes"},{"location":"guides/tech/docs/","text":"Docs Guide \u00b6 Readme \u00b6 Awesome Readme Template Markdown Tutorial \u00b6 Communicating using Markdown | GitHub Learning Lab Markdown Language Reference \u00b6 Mastering Markdown Learn markdown in Y Minutes Makefile \u00b6 Make is a common tool on Unix-based platforms (and is available for Windows ). Following the make documentation , Makefile conventions , and portability guide will help ensure your Makefiles work effectively across systems. Here are some examples to get started . A number of data folks use make as their tool of choice, including Mike Bostock . Advanced \u00b6 The documentation system \u2014 Documentation system documentation","title":"Docs"},{"location":"guides/tech/docs/#docs-guide","text":"","title":"Docs Guide"},{"location":"guides/tech/docs/#readme","text":"Awesome Readme Template","title":"Readme"},{"location":"guides/tech/docs/#markdown-tutorial","text":"Communicating using Markdown | GitHub Learning Lab","title":"Markdown Tutorial"},{"location":"guides/tech/docs/#markdown-language-reference","text":"Mastering Markdown Learn markdown in Y Minutes","title":"Markdown Language Reference"},{"location":"guides/tech/docs/#makefile","text":"Make is a common tool on Unix-based platforms (and is available for Windows ). Following the make documentation , Makefile conventions , and portability guide will help ensure your Makefiles work effectively across systems. Here are some examples to get started . A number of data folks use make as their tool of choice, including Mike Bostock .","title":"Makefile"},{"location":"guides/tech/docs/#advanced","text":"The documentation system \u2014 Documentation system documentation","title":"Advanced"},{"location":"guides/tech/frontend/","text":"emmet balance outward in vscode html:5 cmd + space for completion and auto imports \u00b6","title":"Frontend"},{"location":"guides/tech/frontend/#cmd-space-for-completion-and-auto-imports","text":"","title":"cmd + space for completion and auto imports"},{"location":"guides/tech/git/","text":"Git Guide \u00b6 Git Intro \u00b6 Git & Github Training - Google Slides - Louis Guitton Github Intro \u00b6 Introduction to GitHub | GitHub Learning Lab References \u00b6 Atlassian Git workflows Git the simple guide and its cheatsheet Version control for jupyter notebooks Commit messages guide Mastering Markdown Advanced Git: keeping a clean commit history Interactive Git exercises, from hello world to advanced in 1 hour Visualisation of git commands: Explain Git with D3 Github's 3 flows \u00b6 the git merge flow on Github the git squash and merge flow the git rebase flow pros and cons of keeping your git history clean etc...","title":"Git"},{"location":"guides/tech/git/#git-guide","text":"","title":"Git Guide"},{"location":"guides/tech/git/#git-intro","text":"Git & Github Training - Google Slides - Louis Guitton","title":"Git Intro"},{"location":"guides/tech/git/#github-intro","text":"Introduction to GitHub | GitHub Learning Lab","title":"Github Intro"},{"location":"guides/tech/git/#references","text":"Atlassian Git workflows Git the simple guide and its cheatsheet Version control for jupyter notebooks Commit messages guide Mastering Markdown Advanced Git: keeping a clean commit history Interactive Git exercises, from hello world to advanced in 1 hour Visualisation of git commands: Explain Git with D3","title":"References"},{"location":"guides/tech/git/#githubs-3-flows","text":"the git merge flow on Github the git squash and merge flow the git rebase flow pros and cons of keeping your git history clean etc...","title":"Github's 3 flows"},{"location":"guides/tech/ml-testing/","text":"","title":"Ml testing"},{"location":"guides/tech/mlops/","text":"","title":"Mlops"},{"location":"guides/tech/python/","text":"Python Guide \u00b6 Language Reference \u00b6 Learn Python in Y Minutes Setup and use python \u00b6 The right and wrong way to set up Python 3 on MacOS | Opensource.com How to use pyenv to run multiple versions of Python on a Mac | Opensource.com venv Productive developer environment \u00b6 Python Development in Visual Studio Code \u2013 Real Python How to structure a Python Project \u00b6 Structuring Your Project \u2014 The Hitchhiker's Guide to Python Code Style \u00b6 Code Style \u2014 The Hitchhiker's Guide to Python pre-commit black flake8 type hints & flake8-annotations & mypy isort flake8-docstrings Key Librairies \u00b6 Libraries Landscape in Python Unit testing \u00b6 Here is a basic example of a pytest test: import pytest from koala.io.config import Config from koala.io.datawarehouse import DataWarehouse class TestDataWarehouse : @pytest . fixture def dwh_config ( self ): return Config () @pytest . mark . parametrize ( \"names\" , [ True , False ], ids = [ \"NamesOnly\" , \"All\" ]) def test_get_all_metrics ( self , dwh_config , names ): # Given dwh = DataWarehouse ( envir = dwh_config ) # When results = dwh . get_all_metrics ( name_only = names ) # Then assert results is not None assert isinstance ( results , list ) Here the test is test_get_all_metrics . It pulls in the dwh_config fixture which I'll cover later. It also uses pytest 's parametrizing decorator to run the same test multiple times with different data configurations. The key practice that makes testing really really easy is the Given/When/Then framework which makes the process of writing tests calmingly methodic and digestable. Given Everything I need to setup a test. This can consist of test data but also of setting up a database connection using fixtures which I promise I'll cover later. The distinction I like is that fixtures return ERROR s where as tests throw FAIL s. When The part of the code under test. I try to make this section one line of code so it is really clear what is being tested and how a user would write the same line of code. It forces me to think about the Developer Experience (DX) of the API design. Then This is the part where you confirm your expectations. Aim for proprty based aspects instead of fixed values. This might mean you have to sharpen your knowledge of metaprogramming methods like isinstance . References \u00b6 louisguitton/simple-cookiecutter-python The Hitchhiker\u2019s Guide to Python Advanced python testing A practical guide to setup.py How to make an awesome Python package in 2021 | Anton Zhiyanov","title":"Python"},{"location":"guides/tech/python/#python-guide","text":"","title":"Python Guide"},{"location":"guides/tech/python/#language-reference","text":"Learn Python in Y Minutes","title":"Language Reference"},{"location":"guides/tech/python/#setup-and-use-python","text":"The right and wrong way to set up Python 3 on MacOS | Opensource.com How to use pyenv to run multiple versions of Python on a Mac | Opensource.com venv","title":"Setup and use python"},{"location":"guides/tech/python/#productive-developer-environment","text":"Python Development in Visual Studio Code \u2013 Real Python","title":"Productive developer environment"},{"location":"guides/tech/python/#how-to-structure-a-python-project","text":"Structuring Your Project \u2014 The Hitchhiker's Guide to Python","title":"How to structure a Python Project"},{"location":"guides/tech/python/#code-style","text":"Code Style \u2014 The Hitchhiker's Guide to Python pre-commit black flake8 type hints & flake8-annotations & mypy isort flake8-docstrings","title":"Code Style"},{"location":"guides/tech/python/#key-librairies","text":"Libraries Landscape in Python","title":"Key Librairies"},{"location":"guides/tech/python/#unit-testing","text":"Here is a basic example of a pytest test: import pytest from koala.io.config import Config from koala.io.datawarehouse import DataWarehouse class TestDataWarehouse : @pytest . fixture def dwh_config ( self ): return Config () @pytest . mark . parametrize ( \"names\" , [ True , False ], ids = [ \"NamesOnly\" , \"All\" ]) def test_get_all_metrics ( self , dwh_config , names ): # Given dwh = DataWarehouse ( envir = dwh_config ) # When results = dwh . get_all_metrics ( name_only = names ) # Then assert results is not None assert isinstance ( results , list ) Here the test is test_get_all_metrics . It pulls in the dwh_config fixture which I'll cover later. It also uses pytest 's parametrizing decorator to run the same test multiple times with different data configurations. The key practice that makes testing really really easy is the Given/When/Then framework which makes the process of writing tests calmingly methodic and digestable. Given Everything I need to setup a test. This can consist of test data but also of setting up a database connection using fixtures which I promise I'll cover later. The distinction I like is that fixtures return ERROR s where as tests throw FAIL s. When The part of the code under test. I try to make this section one line of code so it is really clear what is being tested and how a user would write the same line of code. It forces me to think about the Developer Experience (DX) of the API design. Then This is the part where you confirm your expectations. Aim for proprty based aspects instead of fixed values. This might mean you have to sharpen your knowledge of metaprogramming methods like isinstance .","title":"Unit testing"},{"location":"guides/tech/python/#references","text":"louisguitton/simple-cookiecutter-python The Hitchhiker\u2019s Guide to Python Advanced python testing A practical guide to setup.py How to make an awesome Python package in 2021 | Anton Zhiyanov","title":"References"},{"location":"guides/tech/sql/","text":"SQL Guide \u00b6 Language Reference \u00b6 Learn SQL in Y Minutes Language flavors (Redshift, ...) \u00b6 Learn SQL | PopSQL Code Style \u00b6 This SQL guide is mostly outdated. We follow corp/dbt_style_guide.md at master \u00b7 fishtown-analytics/corp . Most of it still applies, but: we don't UPPERCASE anymore, we lowercase (less code yelling at you all day) regarding commas: you can use leading or trailing commas, but if you're looking to wrap your head around the reasons behind one or the other, please read A Dispassionate Examination of the Empirical Evidence Regarding Positional Punctuation in SQL SQL vs Pandas \u00b6 Practical SQL for Data Analysis | Haki Benita Best way to play around with sql \u00b6 SQLite","title":"SQL"},{"location":"guides/tech/sql/#sql-guide","text":"","title":"SQL Guide"},{"location":"guides/tech/sql/#language-reference","text":"Learn SQL in Y Minutes","title":"Language Reference"},{"location":"guides/tech/sql/#language-flavors-redshift","text":"Learn SQL | PopSQL","title":"Language flavors (Redshift, ...)"},{"location":"guides/tech/sql/#code-style","text":"This SQL guide is mostly outdated. We follow corp/dbt_style_guide.md at master \u00b7 fishtown-analytics/corp . Most of it still applies, but: we don't UPPERCASE anymore, we lowercase (less code yelling at you all day) regarding commas: you can use leading or trailing commas, but if you're looking to wrap your head around the reasons behind one or the other, please read A Dispassionate Examination of the Empirical Evidence Regarding Positional Punctuation in SQL","title":"Code Style"},{"location":"guides/tech/sql/#sql-vs-pandas","text":"Practical SQL for Data Analysis | Haki Benita","title":"SQL vs Pandas"},{"location":"guides/tech/sql/#best-way-to-play-around-with-sql","text":"SQLite","title":"Best way to play around with sql"},{"location":"guides/tech/tailwindcss/","text":"","title":"Tailwindcss"},{"location":"guides/tech/venv/","text":"python -m => run as python module python training.py => run as script python -m training.py src/ init .py training.py python src/training.py python -m src.training python -m venv venv_name => venv_name/ venv_name/bin => binaries => command venv_name/lib from pandas import json_normalize from pandas.io.json import _json_normalize source venv/bin/activate => call a bash script to add venv/bin to your path source \\<> . . ~/.aliases => import a bash script source deps.sh deactivate","title":"Venv"}]}